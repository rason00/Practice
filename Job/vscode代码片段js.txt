	"Print to console": {
		"prefix": "clog",
		"body": [
			"console.log('$1');"
		],
		"description": "Log output to console"
	},
	"sbanner的js": {
		"prefix": "swjs",
		"body": [
			"var mySwiper = new Swiper('.$1', {",
			"  loop: true, // 循环",
			"  observer: true, // 修改swiper自己或子元素时，自动初始化swiper",
			"  observeParents: true, // 修改swiper的父元素时，自动初始化swiper",
			"  paginationClickable: true, // 分页器是否可点",
			"  autoplay: 3000, // 自动轮播时间",
			"  autoplayDisableOnInteraction: false, // 用户操作swiper之后，是否禁止autoplay",
			"  // 如果需要前进后退按钮",
			"  nextButton: '.swiper-button-next',",
			"  prevButton: '.swiper-button-prev',",
			"  // 如果需要分页器",
			"  pagination: '.swiper-pagination'",
			"});"
		],
		"description": "swiper的js"
	},
	"获取屏幕高度": {
		"prefix": "lwh",
		"body": [
			"let wHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;"
		],
		"description": "获取屏幕高度"
	},
	"获取屏幕宽度": {
		"prefix": "lww",
		"body": [
			"let wWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;"
		],
		"description": "获取屏幕宽度"
	},
	"vue生命周期": {
		"prefix": "smzq",
		"body": [
			"//在实例创建完成后被立即调用",
			"created() {},",
			"//el 被新创建的替换，并挂载到实例上去之后调用",
			"mounted() {},",
			"//由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用",
			"updated() {},"
		],
		"description": "vue生命周期"
	},
	"vue内容": {
		"prefix": "vuemain",
		"body": [
			"name: $1,",
			"//注册组件",
			"components: {},",
			"//data属性",
			"data() {",
			"  return{};",
			"},",
			"//监听",
			" watch: {},",
			"//生命周期",
			"//在实例创建完成后被立即调用",
			"created() {},",
			"//el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用",
			"mounted() {},",
			"//由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用",
			"updated() {},",
			"//计算",
			"computed: {},",
			"//方法",
			"methods: {},"
		],
		"description": "vue的js部分的内容"
	},
	"commonjs开头": {
		"prefix": "commjs",
		"body": [
			"module.exports = function() {",
			"  $1",
			"}"
		],
		"description": "commonjs开头写法"
	},
	"indexjs代码": {
		"prefix": "indexjs",
		"body": [
			"import _ from 'lodash';",
			"function component() {",
			"  var element = document.createElement('div');//创建一个div",
			"  element.classList.add('hello');//添加class",
			"  $1",
			"  return element;",
			"}",
			"document.body.appendChild(component());//更新body内容"
		],
		"description": "commonjs开头写法"
	},
	"判断热更新js": {
		"prefix": "hotjs",
		"body": [
			"if (module.hot) {",
			"  module.hot.accept('$1', function () {//填写被改写js的路径",
			"    console.log('$2 文件被修改了');//输出名字，方便控制台查看",
			"    $3//执行被更新的引入函数如：import printMe from './print'则写入printMe()",
			"  })",
			"}"
		],
		"description": "判断热更新的js代码"
	},
	"webpack.config.js": {
		"prefix": "wpconfig",
		"body": [
			"/** --- 所有需要的npm ---",
			" * 打包js依赖：cnpm install --save lodash",
			" * 加载css：cnpm install css-loader style-loader --save-dev",
			" * 本地服务器：cnpm install --save-dev webpack-dev-server",
			" * 加载图片：cnpm install --save-dev file-loader",
			" * 加载数据：cnpm install --save-dev csv-loader xml-loader",
			" * 清理dist文件：cnpm install clean-webpack-plugin --save-dev",
			" * 动态生成html：cnpm install --save-dev html-webpack-plugin",
			" * 加载bable：cnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react",
			" * -----------------------",
			" * 总：cnpm install lodash css-loader style-loader clean-webpack-plugin html-webpack-plugin webpack-dev-server file-loader csv-loader xml-loader babel-core babel-loader babel-preset-es2015 babel-preset-react --save-dev",
			" */",
			"const path = require('path');",
			"// 动态生成index.html",
			"const HtmlWebpackPlugin = require('html-webpack-plugin');",
			"// 清理/dist文件夹",
			"const CleanWebpackPlugin = require('clean-webpack-plugin');",
			"// 模块热替换",
			"const webpack = require('webpack');",
			"module.exports ={",
			"  devtool: 'inline-source-map', //生成Source Maps（使调试更容易！仅开发模式使用）",
			"  /** --- 入口 --- **/",
			"  entry: {",
			"    app: './src/index.js', //app文件入口可任意修改添加多个",
			"  }, //唯一入口文件",
			"  /** ---设定--- **/",
			"  plugins: [",
			"    /** --- 清理dist文件夹 ---",
			"     * 在每次构建前清理 /dist 文件夹",
			"     * cnpm install clean-webpack-plugin --save-dev",
			"     */",
			"    // 清理/dist文件夹",
			"    new CleanWebpackPlugin(['dist']),",
			"    /** --- 动态生成index.html文件 ---",
			"     * 修改入口时不用再手动修改",
			"     * 首先安装插件",
			"     * cnpm install --save-dev html-webpack-plugin",
			"     */",
			"    // 动态生成index.html",
			"    new HtmlWebpackPlugin({",
			"      title: 'Output Management'",
			"    }),",
			"    // 模块热替换",
			"    new webpack.NamedModulesPlugin(),",
			"    new webpack.HotModuleReplacementPlugin()",
			"  ],",
			"  /** --- 出口 --- **/",
			"  output: {",
			"    filename: '[name].bundle.js', //[name]根据入口起点名称动态生成 bundle 名称生成打包后的文件名",
			"    path: path.resolve(__dirname, 'dist'), //打包后的文件存放的地方",
			"  },",
			"  /** --- 加载打包js依赖 ---",
			"   * 要在 index.js 中打包 lodash 依赖，我们需要在本地安装 library。",
			"   * cnpm install --save lodash",
			"   * 然后在我们的脚本中 import。",
			"   * 文件路径=》src/index.js",
			"   * import _ from 'lodash';",
			"   * 在package.json中的scripts对象中添加如下命令，用以方便打包：",
			"   * \"build\": \"webpack\"",
			"   * 在终端中输入npm run build即可打包",
			"   */",
			"  /** --- 加载本地服务器 ---",
			"   * 浏览器监听代码的修改，并自动刷新显示修改后的结果，需要单独安装它作为项目依赖",
			"   * cnpm install --save-dev webpack-dev-server",
			"   * 在package.json中的scripts对象中添加如下命令，用以开启本地服务器：",
			"   * \"server\": \"webpack-dev-server --open\",",
			"   * 在终端中输入npm run server即可在本地查看结果",
			"   */",
			"  devServer: {",
			"    contentBase: \"./dist\", //本地服务器所加载的页面所在的目录",
			"    hot: true, //模块热替换",
			"    historyApiFallback: true, //在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html",
			"    inline: true, //实时刷新",
			"    //port:8080 //设置默认监听端口，如果省略，默认为8080",
			"  },",
			"  /** --- 资源管理 --- **/",
			"  module: {",
			"    rules: [",
			"      /** --- 加载css ---",
			"       * 安装我们的css loader以及sass loader",
			"       * cnpm install css-loader style-loader --save-dev",
			"       */",
			"      {",
			"        test: /\\.css$/,",
			"        use: [",
			"          'style-loader',",
			"          'css-loader'",
			"        ]",
			"      },",
			"      /** --- 加载图片 ---",
			"       * 使用 file-loader，将这些图片混合到 CSS 中:",
			"       * cnpm install --save-dev file-loader",
			"       */",
			"      {",
			"        test: /\\.(png|svg|jpg|gif)$/,",
			"        use: [",
			"          'file-loader'",
			"        ]",
			"      },",
			"      /** --- 加载数据 ---",
			"       * 可以加载的有用资源还有数据，如 JSON 文件，CSV、TSV 和 XML",
			"       * 就是说 import Data from './data.json' 默认正常运行",
			"       * 要导入 CSV、TSV 和 XML，可以使用 csv-loader 和 xml-loader",
			"       * cnpm install --save-dev csv-loader xml-loader",
			"       */",
			"      {",
			"        test: /\\.(csv|tsv)$/,",
			"        use: [",
			"          'csv-loader'",
			"        ]",
			"      },",
			"      {",
			"        test: /\\.xml$/,",
			"        use: [",
			"          'xml-loader'",
			"        ]",
			"      },",
			"      /** --- 加载bablejs ---",
			"       * npm一次性安装多个依赖模块，模块之间用空格隔开;安装babel（js转换）",
			"       * cnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react",
			"       */",
			"      {",
			"        test: /(\\.jsx|\\.js)$/,",
			"        use: {",
			"          loader: \"babel-loader\",",
			"          //以下options内容可以直接另起一个 .babelrc 文件存放，格式是直接{presets:[....]}",
			"          options: {",
			"            presets: [ \"es2015\" ]",
			"          }",
			"        },",
			"        exclude: /node_modules/",
			"      },",
			"    ]",
			"  }",
			"}"
		],
		"description": "webpack.config.js的基础代码"
	}
