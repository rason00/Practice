	"Print to console": {
		"prefix": "clog",
		"body": [
			"console.log('$1');"
		],
		"description": "Log output to console"
	},
	"sbanner的js": {
		"prefix": "swjs",
		"body": [
			"var mySwiper = new Swiper('.$1', {",
			"  loop: true, // 循环",
			"  observer: true, // 修改swiper自己或子元素时，自动初始化swiper",
			"  observeParents: true, // 修改swiper的父元素时，自动初始化swiper",
			"  paginationClickable: true, // 分页器是否可点",
			"  autoplay: 3000, // 自动轮播时间",
			"  autoplayDisableOnInteraction: false, // 用户操作swiper之后，是否禁止autoplay",
			"  // 如果需要前进后退按钮",
			"  nextButton: '.swiper-button-next',",
			"  prevButton: '.swiper-button-prev',",
			"  // 如果需要分页器",
			"  pagination: '.swiper-pagination'",
			"});"
		],
		"description": "swiper的js"
	},
	"获取屏幕高度": {
		"prefix": "lwh",
		"body": [
			"let wHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;"
		],
		"description": "获取屏幕高度"
	},
	"获取屏幕宽度": {
		"prefix": "lww",
		"body": [
			"let wWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;"
		],
		"description": "获取屏幕宽度"
	},
	"vue生命周期": {
		"prefix": "smzq",
		"body": [
			"//在实例创建完成后被立即调用",
			"created() {},",
			"//el 被新创建的替换，并挂载到实例上去之后调用",
			"mounted() {},",
			"//由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用",
			"updated() {},"
		],
		"description": "vue生命周期"
	},
	"vue内容": {
		"prefix": "vuemain",
		"body": [
			"name: $1,",
			"//注册组件",
			"components: {},",
			"//data属性",
			"data() {",
			"  return{};",
			"},",
			"//监听",
			" watch: {},",
			"//生命周期",
			"//在实例创建完成后被立即调用",
			"created() {},",
			"//el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用",
			"mounted() {},",
			"//由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用",
			"updated() {},",
			"//计算",
			"computed: {},",
			"//方法",
			"methods: {},"
		],
		"description": "vue的js部分的内容"
	},
	"commonjs开头": {
		"prefix": "commjs",
		"body": [
			"module.exports = function() {",
			"  $1",
			"}"
		],
		"description": "commonjs开头写法"
	},
	"indexjs代码": {
		"prefix": "indexjs",
		"body": [
			"function component() {",
			"  var element = document.createElement('div');//创建一个div",
			"  element.classList.add('hello');//添加class",
			"  $1",
			"  return element;",
			"}",
			"document.body.appendChild(component());//更新body内容"
		],
		"description": "commonjs开头写法"
	},
	"webpack.config.js": {
		"prefix": "wpconfig",
		"body": [
			"const path = require('path');",
			"const webpack = require('webpack');",
			"// 清理dist文件夹",
			"const CleanWebpackPlugin = require('clean-webpack-plugin');",
			"// 压缩JS代码",
			"const uglify = require('uglifyjs-webpack-plugin');",
			"// 打包html文件",
			"const htmlPlugin = require('html-webpack-plugin');",
			"// css分离",
			"const extractTextPlugin = require('extract-text-webpack-plugin');",
			"// css图片路径",
			"if (process.env.type == 'build') {",
			"  var website = {",
			"  publicPath: './'",
			"  }",
			"} else {",
			"  var website = {",
			"    publicPath: 'http://.com/'",
			"  }",
			"}",
			"// 消除css",
			"const glob = require('glob');",
			"const PurifyCSSPlugin = require('purifycss-webpack');",
			"module.exports = {",
			"  // 调试模式",
			"  devtool: 'eval-source-map',",
			"  //入口文件的配置项",
			"  entry: {",
			"    app: './src/index.js',",
			"    jquery: 'jquery',",
			"  },",
			"  //出口文件的配置项",
			"  output: {",
			"    //输出的路径，用了Node语法",
			"    path: path.resolve(__dirname, 'dist'),",
			"    //输出的文件名称",
			"    filename: '[name].bundle.js',",
			"    //css图片路径",
			"    // publicPath: ''",
			"  },",
			"  //模块：例如解读CSS,图片如何转换，压缩",
			"  module: {",
			"    rules: [",
			"      // 加载css",
			"      {",
			"        test: /\\.css$/,",
			"        // css分离",
			"        use: extractTextPlugin.extract({",
			"          fallback: 'style-loader',",
			"          use: [",
			"            { loader: 'css-loader', options: { importLoaders: 1 } },",
			"            'postcss-loader'",
			"          ]",
			"        })",
			"      },",
			"      // 加载css图片",
			"      {",
			"        test: /\\.(png|jpg|gif)/,",
			"        use: [{",
			"          loader: 'url-loader',",
			"          options: {",
			"            // 把小于5000B的文件打成Base64的格式，写入JS",
			"            limit: 5,",
			"            // 图片分离的路径",
			"            outputPath: 'images/',",
			"          }",
			"        }]",
			"      },",
			"      // html图片",
			"      {",
			"        test: /\\.(htm|html)$/i,",
			"        use: ['html-withimg-loader']",
			"      },",
			"      // sass",
			"      {",
			"        test: /\\.scss$/,",
			"        use: extractTextPlugin.extract({",
			"        use: ['css-loader','sass-loader','postcss-loader'],",
			"          fallback: 'style-loader'",
			"        })",
			"      },",
			"      // bable",
			"      {",
			"        test: /\\.(jsx|js)$/,",
			"        use: {",
			"          loader: 'babel-loader',",
			"        },",
			"        exclude: /node_modules/",
			"      }",
			"    ]",
			"  },",
			"  //插件，用于生产模版和各项功能",
			"  plugins: [",
			"    // 清理/dist文件夹,",
			"    new CleanWebpackPlugin(['dist']),",
			"    // 压缩代码",
			"    new uglify(),",
			"    // 打包html",
			"    new htmlPlugin({",
			"      // 对html文件进行压缩",
			"      minify: {",
			"        // 是否去掉属性的双引号",
			"        removeAttributeQuotes: true",
			"      },",
			"      // 避免缓存JS",
			"      hash: true,",
			"      // 要打包的html模版路径和文件名称",
			"      template: './src/index.html'",
			"    }),",
			"    // css分离",
			"    new extractTextPlugin('index.css'),",
			"    // css消除",
			"    new PurifyCSSPlugin({",
			"      paths: glob.sync(path.join(__dirname, 'src/*.html')),",
			"    }),",
			"    // 引入jq",
			"    new webpack.ProvidePlugin({",
			"      $: 'jquery'",
			"    }),",
			"    // 抬头文件声明",
			"    new webpack.BannerPlugin('本内容负责代码编者：Rason'),",
			"    // 抽离第三方插件",
			"    new webpack.optimize.CommonsChunkPlugin({",
			"      //name对应入口文件中的名字，我们起的是jQuery",
			"      name: ['jquery'],",
			"      //把文件打包到哪里，是一个路径",
			"      filename: 'js/[name].js',",
			"      //最小打包的文件模块数，这里直接写2就好",
			"      minChunks: 2",
			"    }),",
			"  ],",
			"  //配置webpack开发服务功能",
			"  devServer: {",
			"    //设置基本目录结构",
			"    contentBase: path.resolve(__dirname, 'dist'),",
			"    //服务器的IP地址，可以使用IP也可以使用localhost",
			"    host: 'localhost',",
			"    //服务端压缩是否开启",
			"    compress: true,",
			"    //配置服务端口号",
			"    port: 1717",
			"  }",
			"}",
			"/**",
			" * 本地服务器：cnpm install webpack-dev-server --save-dev",
			" * （\"server\": \"webpack-dev-server --open\"）",
			" * 加载css：cnpm install style-loader css-loader --save-dev",
			" * 打包html：cnpm install --save-dev html-webpack-plugin",
			" * css图片：cnpm install --save-dev file-loader url-loader",
			" * css分离：cnpm install --save-dev extract-text-webpack-plugin",
			" * html图片：cnpm install html-withimg-loader --save",
			" * sass：1，cnpm install --save-dev node-sass 2，cnpm install --save-dev sass-loader",
			" * css前缀：cnpm install --save-dev postcss-loader autoprefixer",
			" * （配置文件---postcss.config.js）内容module.exports = {plugins: [require('autoprefixer')]}",
			" * 消除css：cnpm i -D purifycss-webpack purify-css",
			" * bable：cnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react",
			" * （配置文件---.babelrc）内容{'presets':['react','env']}",
			" * 全局引入jq：cnpm install --save jquery",
			" * 清理dist文件：cnpm install clean-webpack-plugin --save-dev",
			" * \"dev\":\"set type=dev&webapck\",",
			" */"
		],
		"description": "webpack.config.js的基础代码"
	}
